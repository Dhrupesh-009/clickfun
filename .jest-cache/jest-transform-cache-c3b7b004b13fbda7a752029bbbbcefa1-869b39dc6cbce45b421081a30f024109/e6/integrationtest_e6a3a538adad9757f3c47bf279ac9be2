abef33bfafda571e3d2c90d8a5542307
"use strict";

require("core-js/modules/es.symbol.js");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.object.get-prototype-of.js");
require("core-js/modules/es.object.set-prototype-of.js");
require("core-js/modules/es.object.keys.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.promise.js");
var _globals = require("@jest/globals");
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i.return) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o("next", 0), o("throw", 1), o("return", 2)); }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } /**
 * 整合測試 - ClickFun 專案
 * 測試主要功能模組的整合
 */
// 模擬瀏覽器環境
global.window = {
  addEventListener: _globals.jest.fn(),
  removeEventListener: _globals.jest.fn(),
  location: {
    href: 'http://localhost:3000'
  },
  localStorage: {
    getItem: _globals.jest.fn(),
    setItem: _globals.jest.fn(),
    removeItem: _globals.jest.fn(),
    clear: _globals.jest.fn()
  },
  sessionStorage: {
    getItem: _globals.jest.fn(),
    setItem: _globals.jest.fn(),
    removeItem: _globals.jest.fn(),
    clear: _globals.jest.fn()
  }
};
global.document = {
  createElement: _globals.jest.fn(function () {
    return {
      addEventListener: _globals.jest.fn(),
      removeEventListener: _globals.jest.fn(),
      setAttribute: _globals.jest.fn(),
      getAttribute: _globals.jest.fn(),
      appendChild: _globals.jest.fn(),
      removeChild: _globals.jest.fn(),
      innerHTML: '',
      textContent: '',
      style: {},
      classList: {
        add: _globals.jest.fn(),
        remove: _globals.jest.fn(),
        contains: _globals.jest.fn()
      }
    };
  }),
  getElementById: _globals.jest.fn(),
  querySelector: _globals.jest.fn(),
  querySelectorAll: _globals.jest.fn(),
  addEventListener: _globals.jest.fn(),
  removeEventListener: _globals.jest.fn()
};
global.navigator = {
  serviceWorker: {
    register: _globals.jest.fn(),
    ready: Promise.resolve()
  },
  onLine: true
};

// 測試套件
describe('ClickFun 整合測試', function () {
  beforeEach(function () {
    _globals.jest.clearAllMocks();
    _globals.jest.resetModules();
  });
  describe('PWA 功能整合', function () {
    test('Service Worker 註冊', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var mockRegister;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            // 模擬 Service Worker 註冊
            mockRegister = _globals.jest.fn().mockResolvedValue({
              active: {
                state: 'activated'
              },
              installing: null,
              waiting: null
            });
            global.navigator.serviceWorker.register = mockRegister;

            // 這裡可以測試實際的 Service Worker 註冊邏輯
            expect(mockRegister).toBeDefined();
          case 1:
            return _context.a(2);
        }
      }, _callee);
    })));
    test('離線功能支援', function () {
      // 測試離線狀態檢測
      global.navigator.onLine = false;
      expect(global.navigator.onLine).toBe(false);
      global.navigator.onLine = true;
      expect(global.navigator.onLine).toBe(true);
    });
  });
  describe('本地儲存整合', function () {
    test('遊戲狀態儲存', function () {
      var mockLocalStorage = global.window.localStorage;
      var gameState = {
        score: 100,
        level: 5
      };

      // 測試儲存
      mockLocalStorage.setItem('gameState', JSON.stringify(gameState));
      expect(mockLocalStorage.setItem).toHaveBeenCalledWith('gameState', JSON.stringify(gameState));

      // 測試讀取
      mockLocalStorage.getItem.mockReturnValue(JSON.stringify(gameState));
      var retrieved = JSON.parse(mockLocalStorage.getItem('gameState'));
      expect(retrieved).toEqual(gameState);
    });
    test('快取清理', function () {
      var mockLocalStorage = global.window.localStorage;
      mockLocalStorage.clear();
      expect(mockLocalStorage.clear).toHaveBeenCalled();
    });
  });
  describe('DOM 操作整合', function () {
    test('元素創建和操作', function () {
      var mockElement = global.document.createElement('div');
      expect(mockElement).toBeDefined();
      expect(mockElement.addEventListener).toBeDefined();
      expect(mockElement.setAttribute).toBeDefined();
    });
    test('事件監聽器管理', function () {
      var mockElement = global.document.createElement('button');
      var mockHandler = _globals.jest.fn();
      mockElement.addEventListener('click', mockHandler);
      expect(mockElement.addEventListener).toHaveBeenCalledWith('click', mockHandler);
      mockElement.removeEventListener('click', mockHandler);
      expect(mockElement.removeEventListener).toHaveBeenCalledWith('click', mockHandler);
    });
  });
  describe('效能監控整合', function () {
    test('效能指標收集', function () {
      // 模擬 Performance API
      global.performance = {
        now: _globals.jest.fn(function () {
          return Date.now();
        }),
        mark: _globals.jest.fn(),
        measure: _globals.jest.fn(),
        getEntriesByType: _globals.jest.fn(function () {
          return [];
        })
      };
      expect(global.performance.now).toBeDefined();
      expect(global.performance.mark).toBeDefined();
      expect(global.performance.measure).toBeDefined();
    });
  });
  describe('錯誤處理整合', function () {
    test('全域錯誤處理', function () {
      var mockErrorHandler = _globals.jest.fn();

      // 模擬錯誤事件監聽器
      global.window.addEventListener('error', mockErrorHandler);
      expect(global.window.addEventListener).toHaveBeenCalledWith('error', mockErrorHandler);

      // 模擬未處理的 Promise 拒絕
      global.window.addEventListener('unhandledrejection', mockErrorHandler);
      expect(global.window.addEventListener).toHaveBeenCalledWith('unhandledrejection', mockErrorHandler);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,